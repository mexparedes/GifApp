{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,oCACA,0BAAMC,SAPY,SAACC,GACnBA,EAAEC,iBACFN,GAAe,SAAAO,GAAI,OAAML,GAAN,mBAAsBK,OACzCJ,EAAc,MAKV,2BAAOK,KAAK,OACZC,MAAQP,EACRQ,SAfkB,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,a,uBCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGtC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,+BAAMA,KCHLO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAEtB,MAA0BZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAM,SAAAC,GACKH,EAAS,CACTf,KAAMkB,EACNL,SAAS,SAMvB,CAAEpB,IAGGqB,EDlBsBK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAUrB,OACI,oCACA,wBAAIJ,UAAW,qCAAf,IAAsDhB,GAEpDoB,GAAW,uBAAGJ,UAAU,oCAAb,WAIb,yBAAKA,UAAU,aAEHH,EAAOJ,KAAK,SAAAC,GAAG,OACf,kBAAC,EAAD,eACAiB,IAAMjB,EAAIC,IACLD,UEMVkB,EAhCM,WAIjB,MAAsCxC,mBAAS,CAAC,gBAAhD,mBAAQyC,EAAR,KAAoB1C,EAApB,KAWI,OACA,oCACA,gCAAO,gBAAP,KACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQ0C,EAAWpB,KAAK,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACA2B,IAAM3B,EACNA,SAAWA,U,MCvBhC8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.216c4bcc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n//En el componente AddCategory recibimos la funcion setCategories del componente GifExpertApp\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    //Para poder cambiar el valor en la ventana del input\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // Para poder manejar manejar el agregar el inputValue luego del submit\r\n    const handdleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        setCategories( cats => [ inputValue , ...cats ]);\r\n        setInputValue('');\r\n    }\r\n    return (\r\n        <>\r\n        <form onSubmit={ handdleSubmit }>\r\n            <input type=\"text\" \r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n\r\n          //onChange se encarga de permitir cambiar el valor dentro del input\r\n          //HandleSubmit toma el evento submit y hace el preventDefault();\r\n          //La funcion handdleSubmit toma el inputValue y lo agrega en setCategories\r\n            ></input> \r\n        \r\n        </form>\r\n        </>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async ( category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=3YG811JmfTfXzxQi9aiyxDqkyCAeGf9G`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    \r\n    //console.log( id, title, url );\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n   //data: images es para renombrar en la desestructuracion\r\n    // console.log(data);\r\n    // const [images, setImages] = useState([]); \r\n\r\n    // //Cuando se coloca un [] en dependencias, el use Effect se va a ejecutar una sola vez, cuando es renderizado por primera vez\r\n\r\n\r\n    //getGifs();\r\n\r\n    return (\r\n        <>\r\n        <h3 className= \"animate__animated animate__fadeIn\"> { category }</h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }  \r\n        {/* Si loading es true hace Loading, sino no hace nada */}\r\n\r\n\r\n        <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                    <GifGridItem \r\n                    key={ img.id }\r\n                    { ...img }  //El { ...img } hace que se envien las propiedades del img\r\n                                //lo cual hace que sea mas facil trabajar con el\r\n                    />\r\n                ))\r\n                }\r\n        \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect  } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n        const [state, setState] = useState({\r\n            data: [],\r\n            loading: true    \r\n        });\r\n\r\n        useEffect( () => {\r\n\r\n            getGifs( category )\r\n            .then( imgs => {\r\n                        setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });    \r\n            \r\n                \r\n                \r\n            })\r\n        },[ category ])\r\n\r\n    \r\n        return state;  //Es igual a { data:[], loading: true };\r\n    }","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    //const categories = ['One Punch' , 'Samurai X' , 'Dragon Ball'];\r\n    //const [ categories, setCategories ] = ['One Punch' , 'Samurai X' , 'Dragon Ball'];\r\n    const [ categories, setCategories ] = useState(['Dragon Ball']);\r\n    //const handleAdd = () => {\r\n        //El estado es  ['One punch','Samurai X'. etc]\r\n        //Para cambiar el estado primero agrego las categorias anteriores y agrego berser al final\r\n        \r\n        //setCategories( [...categories,'Berserk'] );\r\n        \r\n        //Tambien se puede cambiar el estado de la siguiente forma:\r\n        //Se puede agregar una callBack que retorne el arreglo\r\n        //setCategories( cats => [...cats, 'Berserk'] ); \r\n        //};\r\n        return (\r\n        <>   \r\n        <h2> { 'GifExpertApp3' } </h2>\r\n        <AddCategory setCategories={ setCategories }/>\r\n        <hr/>\r\n        <ol>\r\n            {\r\n                categories.map( category => \r\n                     <GifGrid \r\n                     key={ category }\r\n                     category={ category } />\r\n                )  \r\n            }\r\n        </ol>\r\n        </> \r\n    )};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n\n//GifExpertApp\n// <h2></h2>\n//<hr/>"],"sourceRoot":""}